"use strict";
var common_1 = require('@angular/common');
var router_1 = require('@angular/router');
var testing_1 = require('@angular/common/testing');
var router_testing_module_1 = require('@angular/router/testing/router_testing_module');
var core_1 = require('@angular/core');
var mock_location_strategy_1 = require('./mock-location-strategy');
exports.provideFakeRouter = function (rootComponentType, config) {
    if (config === void 0) { config = []; }
    return [
        router_1.RouterOutletMap,
        { provide: router_1.UrlSerializer, useClass: router_1.DefaultUrlSerializer },
        { provide: common_1.Location, useClass: testing_1.SpyLocation },
        { provide: core_1.NgModuleFactoryLoader, useClass: router_testing_module_1.SpyNgModuleFactoryLoader },
        { provide: common_1.LocationStrategy, useClass: mock_location_strategy_1.MockLocationStrategy },
        {
            provide: router_1.Router,
            useFactory: function (resolver, urlSerializer, outletMap, location, injector, ngModuleFactoryLoader) {
                return new router_1.Router(rootComponentType, resolver, urlSerializer, outletMap, location, injector, ngModuleFactoryLoader, config);
            },
            deps: [core_1.ComponentResolver, router_1.UrlSerializer, router_1.RouterOutletMap, common_1.Location, core_1.Injector]
        },
        {
            provide: router_1.ActivatedRoute,
            useFactory: function (r) { return r.routerState.root; },
            deps: [router_1.Router]
        },
    ];
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Rpbmcvcm91dGVyL3JvdXRlci10ZXN0aW5nLXByb3ZpZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBTUEsdUJBQXlDLGlCQUFpQixDQUFDLENBQUE7QUFDM0QsdUJBT08saUJBQWlCLENBQUMsQ0FBQTtBQUN6Qix3QkFBMEIseUJBQXlCLENBQUMsQ0FBQTtBQUNwRCxzQ0FBdUMsK0NBQStDLENBQUMsQ0FBQTtBQUN2RixxQkFBdUUsZUFBZSxDQUFDLENBQUE7QUFDdkYsdUNBQW1DLDBCQUEwQixDQUFDLENBQUE7QUFFakQseUJBQWlCLEdBQUcsVUFBQyxpQkFBdUIsRUFBRSxNQUF5QjtJQUF6QixzQkFBeUIsR0FBekIsV0FBeUI7SUFDbEYsTUFBTSxDQUFDO1FBQ0wsd0JBQWU7UUFDZixFQUFFLE9BQU8sRUFBRSxzQkFBYSxFQUFFLFFBQVEsRUFBRSw2QkFBb0IsRUFBRTtRQUMxRCxFQUFFLE9BQU8sRUFBRSxpQkFBUSxFQUFFLFFBQVEsRUFBRSxxQkFBVyxFQUFFO1FBQzVDLEVBQUUsT0FBTyxFQUFFLDRCQUFxQixFQUFFLFFBQVEsRUFBRSxnREFBd0IsRUFBRTtRQUN0RSxFQUFFLE9BQU8sRUFBRSx5QkFBZ0IsRUFBRSxRQUFRLEVBQUUsNkNBQW9CLEVBQUU7UUFDN0Q7WUFDRSxPQUFPLEVBQUUsZUFBTTtZQUNmLFVBQVUsRUFBRSxVQUFDLFFBQTJCLEVBQUUsYUFBNEIsRUFDcEUsU0FBMEIsRUFBRSxRQUFrQixFQUFFLFFBQWtCLEVBQUUscUJBQTRDO2dCQUNoSCxNQUFNLENBQUMsSUFBSSxlQUFNLENBQ2YsaUJBQWlCLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUM5RyxDQUFDO1lBQ0QsSUFBSSxFQUFFLENBQUMsd0JBQWlCLEVBQUUsc0JBQWEsRUFBRSx3QkFBZSxFQUFFLGlCQUFRLEVBQUUsZUFBUSxDQUFDO1NBQzlFO1FBQ0Q7WUFDRSxPQUFPLEVBQUUsdUJBQWM7WUFDdkIsVUFBVSxFQUFFLFVBQUMsQ0FBUyxJQUFLLE9BQUEsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQWxCLENBQWtCO1lBQzdDLElBQUksRUFBRSxDQUFDLGVBQU0sQ0FBQztTQUNmO0tBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0aW5nL3JvdXRlci9yb3V0ZXItdGVzdGluZy1wcm92aWRlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxudGVtcG9yYXJ5IG1vY2sgcm91dGVyIHByb3ZpZGVyIHVudGlsIEBhbmd1bGFyIHByb3ZpZGVzIG9uZSAoY3VycmVudGx5IG5vdCBleHBvcnRlZCAvIGV4cGVyaW1lbnRhbClcbmNvcGllZCBmcm9tIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zcHJpbmdib290LWFuZ3VsYXIyLXR1dG9yaWFsL2FuZ3VsYXIyLWFwcC9tYXN0ZXIvc3JjL3NoYXJlZC9yb3V0ZXMvcm91dGVyLXRlc3RpbmctcHJvdmlkZXJzLnRzXG4qL1xuXG5cbmltcG9ydCB7TG9jYXRpb24sIExvY2F0aW9uU3RyYXRlZ3l9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1xuICBSb3V0ZXJPdXRsZXRNYXAsXG4gIFVybFNlcmlhbGl6ZXIsXG4gIERlZmF1bHRVcmxTZXJpYWxpemVyLFxuICBSb3V0ZXIsXG4gIEFjdGl2YXRlZFJvdXRlLFxuICBSb3V0ZXJDb25maWdcbn0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7U3B5TG9jYXRpb259IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi90ZXN0aW5nJztcbmltcG9ydCB7U3B5TmdNb2R1bGVGYWN0b3J5TG9hZGVyfSBmcm9tICdAYW5ndWxhci9yb3V0ZXIvdGVzdGluZy9yb3V0ZXJfdGVzdGluZ19tb2R1bGUnO1xuaW1wb3J0IHtDb21wb25lbnRSZXNvbHZlciwgSW5qZWN0b3IsIFR5cGUsIE5nTW9kdWxlRmFjdG9yeUxvYWRlcn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge01vY2tMb2NhdGlvblN0cmF0ZWd5fSBmcm9tICcuL21vY2stbG9jYXRpb24tc3RyYXRlZ3knO1xuXG5leHBvcnQgY29uc3QgcHJvdmlkZUZha2VSb3V0ZXIgPSAocm9vdENvbXBvbmVudFR5cGU6IFR5cGUsIGNvbmZpZzogUm91dGVyQ29uZmlnID0gW10pID0+IHtcbiAgcmV0dXJuIFtcbiAgICBSb3V0ZXJPdXRsZXRNYXAsXG4gICAgeyBwcm92aWRlOiBVcmxTZXJpYWxpemVyLCB1c2VDbGFzczogRGVmYXVsdFVybFNlcmlhbGl6ZXIgfSxcbiAgICB7IHByb3ZpZGU6IExvY2F0aW9uLCB1c2VDbGFzczogU3B5TG9jYXRpb24gfSxcbiAgICB7IHByb3ZpZGU6IE5nTW9kdWxlRmFjdG9yeUxvYWRlciwgdXNlQ2xhc3M6IFNweU5nTW9kdWxlRmFjdG9yeUxvYWRlciB9LFxuICAgIHsgcHJvdmlkZTogTG9jYXRpb25TdHJhdGVneSwgdXNlQ2xhc3M6IE1vY2tMb2NhdGlvblN0cmF0ZWd5IH0sXG4gICAge1xuICAgICAgcHJvdmlkZTogUm91dGVyLFxuICAgICAgdXNlRmFjdG9yeTogKHJlc29sdmVyOiBDb21wb25lbnRSZXNvbHZlciwgdXJsU2VyaWFsaXplcjogVXJsU2VyaWFsaXplcixcbiAgICAgICAgb3V0bGV0TWFwOiBSb3V0ZXJPdXRsZXRNYXAsIGxvY2F0aW9uOiBMb2NhdGlvbiwgaW5qZWN0b3I6IEluamVjdG9yLCBuZ01vZHVsZUZhY3RvcnlMb2FkZXI6IE5nTW9kdWxlRmFjdG9yeUxvYWRlcikgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IFJvdXRlcihcbiAgICAgICAgICByb290Q29tcG9uZW50VHlwZSwgcmVzb2x2ZXIsIHVybFNlcmlhbGl6ZXIsIG91dGxldE1hcCwgbG9jYXRpb24sIGluamVjdG9yLCBuZ01vZHVsZUZhY3RvcnlMb2FkZXIsIGNvbmZpZyk7XG4gICAgICB9LFxuICAgICAgZGVwczogW0NvbXBvbmVudFJlc29sdmVyLCBVcmxTZXJpYWxpemVyLCBSb3V0ZXJPdXRsZXRNYXAsIExvY2F0aW9uLCBJbmplY3Rvcl1cbiAgICB9LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IEFjdGl2YXRlZFJvdXRlLFxuICAgICAgdXNlRmFjdG9yeTogKHI6IFJvdXRlcikgPT4gci5yb3V0ZXJTdGF0ZS5yb290LFxuICAgICAgZGVwczogW1JvdXRlcl1cbiAgICB9LFxuICBdO1xufTtcblxuIl19
